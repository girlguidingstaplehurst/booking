// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/calendar.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/girlguidingstaplehurst/booking/pkg/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookingsServiceName is the fully-qualified name of the BookingsService service.
	BookingsServiceName = "api.v1.BookingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookingsServiceListBookingsProcedure is the fully-qualified name of the BookingsService's
	// ListBookings RPC.
	BookingsServiceListBookingsProcedure = "/api.v1.BookingsService/ListBookings"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	bookingsServiceServiceDescriptor            = v1.File_api_v1_calendar_proto.Services().ByName("BookingsService")
	bookingsServiceListBookingsMethodDescriptor = bookingsServiceServiceDescriptor.Methods().ByName("ListBookings")
)

// BookingsServiceClient is a client for the api.v1.BookingsService service.
type BookingsServiceClient interface {
	ListBookings(context.Context, *connect.Request[v1.ListBookingsRequest]) (*connect.Response[v1.ListBookingsResponse], error)
}

// NewBookingsServiceClient constructs a client for the api.v1.BookingsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookingsServiceClient{
		listBookings: connect.NewClient[v1.ListBookingsRequest, v1.ListBookingsResponse](
			httpClient,
			baseURL+BookingsServiceListBookingsProcedure,
			connect.WithSchema(bookingsServiceListBookingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookingsServiceClient implements BookingsServiceClient.
type bookingsServiceClient struct {
	listBookings *connect.Client[v1.ListBookingsRequest, v1.ListBookingsResponse]
}

// ListBookings calls api.v1.BookingsService.ListBookings.
func (c *bookingsServiceClient) ListBookings(ctx context.Context, req *connect.Request[v1.ListBookingsRequest]) (*connect.Response[v1.ListBookingsResponse], error) {
	return c.listBookings.CallUnary(ctx, req)
}

// BookingsServiceHandler is an implementation of the api.v1.BookingsService service.
type BookingsServiceHandler interface {
	ListBookings(context.Context, *connect.Request[v1.ListBookingsRequest]) (*connect.Response[v1.ListBookingsResponse], error)
}

// NewBookingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookingsServiceHandler(svc BookingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookingsServiceListBookingsHandler := connect.NewUnaryHandler(
		BookingsServiceListBookingsProcedure,
		svc.ListBookings,
		connect.WithSchema(bookingsServiceListBookingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.BookingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookingsServiceListBookingsProcedure:
			bookingsServiceListBookingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookingsServiceHandler struct{}

func (UnimplementedBookingsServiceHandler) ListBookings(context.Context, *connect.Request[v1.ListBookingsRequest]) (*connect.Response[v1.ListBookingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.BookingsService.ListBookings is not implemented"))
}
