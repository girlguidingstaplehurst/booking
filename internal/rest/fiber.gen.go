// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add an event
	// (POST /api/v1/add-event)
	AddEvent(c *fiber.Ctx) error

	// (GET /api/v1/admin/events)
	GetApiV1AdminEvents(c *fiber.Ctx, params GetApiV1AdminEventsParams) error

	// (GET /api/v1/admin/events/{eventID})
	GetApiV1AdminEventsEventID(c *fiber.Ctx, eventID string) error

	// (POST /api/v1/admin/send-invoice)
	AdminSendInvoice(c *fiber.Ctx) error

	// (GET /api/v1/events)
	GetApiV1Events(c *fiber.Ctx, params GetApiV1EventsParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// AddEvent operation middleware
func (siw *ServerInterfaceWrapper) AddEvent(c *fiber.Ctx) error {

	return siw.Handler.AddEvent(c)
}

// GetApiV1AdminEvents operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AdminEvents(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1AdminEventsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", query, &params.From)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter from: %w", err).Error())
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", query, &params.To)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter to: %w", err).Error())
	}

	return siw.Handler.GetApiV1AdminEvents(c, params)
}

// GetApiV1AdminEventsEventID operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AdminEventsEventID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID string

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", c.Params("eventID"), &eventID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter eventID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.GetApiV1AdminEventsEventID(c, eventID)
}

// AdminSendInvoice operation middleware
func (siw *ServerInterfaceWrapper) AdminSendInvoice(c *fiber.Ctx) error {

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminSendInvoice(c)
}

// GetApiV1Events operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Events(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1EventsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", query, &params.From)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter from: %w", err).Error())
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", query, &params.To)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter to: %w", err).Error())
	}

	return siw.Handler.GetApiV1Events(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/api/v1/add-event", wrapper.AddEvent)

	router.Get(options.BaseURL+"/api/v1/admin/events", wrapper.GetApiV1AdminEvents)

	router.Get(options.BaseURL+"/api/v1/admin/events/:eventID", wrapper.GetApiV1AdminEventsEventID)

	router.Post(options.BaseURL+"/api/v1/admin/send-invoice", wrapper.AdminSendInvoice)

	router.Get(options.BaseURL+"/api/v1/events", wrapper.GetApiV1Events)

}

type AddEventRequestObject struct {
	Body *AddEventJSONRequestBody
}

type AddEventResponseObject interface {
	VisitAddEventResponse(ctx *fiber.Ctx) error
}

type AddEvent200Response struct {
}

func (response AddEvent200Response) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AddEvent409JSONResponse ErrorResponse

func (response AddEvent409JSONResponse) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type AddEvent422JSONResponse ErrorResponse

func (response AddEvent422JSONResponse) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type AddEvent500JSONResponse ErrorResponse

func (response AddEvent500JSONResponse) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsRequestObject struct {
	Params GetApiV1AdminEventsParams
}

type GetApiV1AdminEventsResponseObject interface {
	VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error
}

type GetApiV1AdminEvents200JSONResponse AdminEventList

func (response GetApiV1AdminEvents200JSONResponse) VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1AdminEvents400JSONResponse ErrorResponse

func (response GetApiV1AdminEvents400JSONResponse) VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetApiV1AdminEvents500JSONResponse ErrorResponse

func (response GetApiV1AdminEvents500JSONResponse) VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsEventIDRequestObject struct {
	EventID string `json:"eventID,omitempty"`
}

type GetApiV1AdminEventsEventIDResponseObject interface {
	VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error
}

type GetApiV1AdminEventsEventID200JSONResponse Event

func (response GetApiV1AdminEventsEventID200JSONResponse) VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsEventID404JSONResponse ErrorResponse

func (response GetApiV1AdminEventsEventID404JSONResponse) VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsEventID500JSONResponse ErrorResponse

func (response GetApiV1AdminEventsEventID500JSONResponse) VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminSendInvoiceRequestObject struct {
	Body *AdminSendInvoiceJSONRequestBody
}

type AdminSendInvoiceResponseObject interface {
	VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error
}

type AdminSendInvoice200Response struct {
}

func (response AdminSendInvoice200Response) VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AdminSendInvoice404JSONResponse ErrorResponse

func (response AdminSendInvoice404JSONResponse) VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminSendInvoice500JSONResponse ErrorResponse

func (response AdminSendInvoice500JSONResponse) VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1EventsRequestObject struct {
	Params GetApiV1EventsParams
}

type GetApiV1EventsResponseObject interface {
	VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error
}

type GetApiV1Events200JSONResponse EventList

func (response GetApiV1Events200JSONResponse) VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1Events400JSONResponse ErrorResponse

func (response GetApiV1Events400JSONResponse) VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetApiV1Events500JSONResponse ErrorResponse

func (response GetApiV1Events500JSONResponse) VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add an event
	// (POST /api/v1/add-event)
	AddEvent(ctx context.Context, request AddEventRequestObject) (AddEventResponseObject, error)

	// (GET /api/v1/admin/events)
	GetApiV1AdminEvents(ctx context.Context, request GetApiV1AdminEventsRequestObject) (GetApiV1AdminEventsResponseObject, error)

	// (GET /api/v1/admin/events/{eventID})
	GetApiV1AdminEventsEventID(ctx context.Context, request GetApiV1AdminEventsEventIDRequestObject) (GetApiV1AdminEventsEventIDResponseObject, error)

	// (POST /api/v1/admin/send-invoice)
	AdminSendInvoice(ctx context.Context, request AdminSendInvoiceRequestObject) (AdminSendInvoiceResponseObject, error)

	// (GET /api/v1/events)
	GetApiV1Events(ctx context.Context, request GetApiV1EventsRequestObject) (GetApiV1EventsResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AddEvent operation middleware
func (sh *strictHandler) AddEvent(ctx *fiber.Ctx) error {
	var request AddEventRequestObject

	var body AddEventJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddEvent(ctx.UserContext(), request.(AddEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AddEventResponseObject); ok {
		if err := validResponse.VisitAddEventResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1AdminEvents operation middleware
func (sh *strictHandler) GetApiV1AdminEvents(ctx *fiber.Ctx, params GetApiV1AdminEventsParams) error {
	var request GetApiV1AdminEventsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1AdminEvents(ctx.UserContext(), request.(GetApiV1AdminEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1AdminEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1AdminEventsResponseObject); ok {
		if err := validResponse.VisitGetApiV1AdminEventsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1AdminEventsEventID operation middleware
func (sh *strictHandler) GetApiV1AdminEventsEventID(ctx *fiber.Ctx, eventID string) error {
	var request GetApiV1AdminEventsEventIDRequestObject

	request.EventID = eventID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1AdminEventsEventID(ctx.UserContext(), request.(GetApiV1AdminEventsEventIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1AdminEventsEventID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1AdminEventsEventIDResponseObject); ok {
		if err := validResponse.VisitGetApiV1AdminEventsEventIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminSendInvoice operation middleware
func (sh *strictHandler) AdminSendInvoice(ctx *fiber.Ctx) error {
	var request AdminSendInvoiceRequestObject

	var body AdminSendInvoiceJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminSendInvoice(ctx.UserContext(), request.(AdminSendInvoiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminSendInvoice")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminSendInvoiceResponseObject); ok {
		if err := validResponse.VisitAdminSendInvoiceResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1Events operation middleware
func (sh *strictHandler) GetApiV1Events(ctx *fiber.Ctx, params GetApiV1EventsParams) error {
	var request GetApiV1EventsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1Events(ctx.UserContext(), request.(GetApiV1EventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1Events")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1EventsResponseObject); ok {
		if err := validResponse.VisitGetApiV1EventsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/bNhD+KwS3R8dyku5hfnMRL/BQpEGcdcCKIKDFs8VOIlXyZNcI/N+HoyjLspTZ",
	"7dxgKPJmi6e743ffd3d64rHJcqNBo+PDJ+7iBDLhf45kpvR4CRrfKYf0JLcmB4sK/Dksq5cUQuZ//Gxh",
	"zof8p6h2GgWPkffENz2O6xz4kAtrxZpvNj1u4XOhLEg+/Fg5fdiamdkniP17Y2uNvQOXG+2gIx06fszA",
	"ObHwx8GBQ6v0oh2oYd4ZzyfcihMbjSLGjgg9DplQKZ3Mjc0E8mF40mubzq3JGpZSIKDKoMtYyc5wWmTQ",
	"eeBQYFGioouMrptbs1ROGS0oG5HTf5A7965fRnN0XuRylu7mMDMmBaFbcCvJQ77h6j7ONtPaVW8LcAXn",
	"s7U5CS3JyX+mZu2klc4PUOevK2UXPjewOqymvTJS7R+FlBacO05Sz8C0l37IvOm/K2k4QUGfrVxezFIV",
	"p+vHHQlJmIsiRT5EW0Cvpahvr1hHsVrx2wh00X9Hnl2QTUHLiV4aFcNbI9f/Wu7D9ayVLMHFVuWojOZD",
	"rzZm5sxTik2uHMNEIMNEOabK6EzkearAMTR93qs7QVsEDcXvWB7VPPbuO0HIDraRur2VIY7A0fvtwNLt",
	"TiFdZDOw9HYDradncJ1cHZaKj9D010kTB3FhFa6nBEuZnKDl4VEUmNC/GQgL9req4r//eU/9wlsTw/1p",
	"zYAEMecbcqz03LTrf//+6j3v8VTFEDaBUmb8+uYPNprPwRp2ffuOXfYHvMcLmwafbhhFq9Wqv9BF39hF",
	"FBy4SCzy9OyyP+iD7ieYpb6GCkmV/K0xfyu9YNO1Q8jY6HZCwwqsK3M57w/6A7I3OWiRKz7k5OiSJCYw",
	"8VhEIlfR8jwSUp7VTSVUr3m1kZRMMA0r5g0ZGoYJsFikoKUgjIgBgqwnsrQfB11S4cBhpTuiWQjltRD7",
	"l6JPriRFyeBD/N72bV+NZqrjKsEZMCElSL5LHmphnk3luuZxuBgM2jeeFnEMzs2LNF0HP5sefzP49WSX",
	"aO6NHTcZaYMJ2AA5fFEOHTO6bCjUZH1GFxcvl9EHkSrpPTP4EkP5eNPjv5QIvkwSU5MBJsT9FeGysia0",
	"CFdkmbDriq6aVaMBxcL5JcQPF/5AxjX5M6WjuqUvwOffpPM14ChXH87rTw/nhWRFBgiWnLeaQQK+RsRE",
	"M0OhQjqOhXGnyOpzAXZdrS3DahLWQDVmatc8PT6sH69dQcsl6eiQD93qOUnt9z7tOor/FzVRY1lmLFQ3",
	"88oo1fmCNLwr+xqrWcCEBRr0JJL/kSrCEPQc3R1/Hx+olpU2/Mnz0oiewnTefI1IxmGiH6GVyRWtTjRU",
	"thPGAloFS6h4S4Orpi1sfdcIviRXDwygsl2XrHzzcjS4Mc1xsVKYlGvo5OrH4aQDLc/CSr27tOwvIZnS",
	"Oyvrd1pG9j8uOoAIx0RqSv3bNpLKiSMs3c568kqyE5PsyG3gdRH4vs31dQc4lRTaC3D9cJ84t96G3Y2n",
	"9/RV6Wp+hLfbXLu1aklU8w1XOSy10uWiFNvmYfNPAAAA///V53AH4BcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
