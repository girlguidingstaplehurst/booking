// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add an event
	// (POST /api/v1/add-event)
	AddEvent(c *fiber.Ctx) error

	// (GET /api/v1/admin/events)
	GetApiV1AdminEvents(c *fiber.Ctx, params GetApiV1AdminEventsParams) error

	// (GET /api/v1/admin/events/{eventID})
	GetApiV1AdminEventsEventID(c *fiber.Ctx, eventID string) error

	// (POST /api/v1/admin/events/{eventID}/approve-event)
	AdminEventApprove(c *fiber.Ctx, eventID string) error

	// (POST /api/v1/admin/events/{eventID}/cancel-event)
	AdminEventCancel(c *fiber.Ctx, eventID string) error

	// (POST /api/v1/admin/events/{eventID}/request-documents)
	AdminEventRequestDocuments(c *fiber.Ctx, eventID string) error

	// (POST /api/v1/admin/events/{eventID}/set-rate)
	AdminEventSetRate(c *fiber.Ctx, eventID string) error

	// (GET /api/v1/admin/invoices/by-id/{invoiceID})
	AdminGetInvoiceByID(c *fiber.Ctx, invoiceID string) error

	// (POST /api/v1/admin/invoices/by-id/{invoiceID}/mark-as-paid)
	AdminMarkInvoicePaid(c *fiber.Ctx, invoiceID string) error

	// (GET /api/v1/admin/invoices/for-events)
	AdminGetInvoicesForEvents(c *fiber.Ctx, params AdminGetInvoicesForEventsParams) error

	// (GET /api/v1/admin/rates)
	AdminGetRates(c *fiber.Ctx) error

	// (POST /api/v1/admin/send-invoice)
	AdminSendInvoice(c *fiber.Ctx) error

	// (GET /api/v1/events)
	GetApiV1Events(c *fiber.Ctx, params GetApiV1EventsParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// AddEvent operation middleware
func (siw *ServerInterfaceWrapper) AddEvent(c *fiber.Ctx) error {

	return siw.Handler.AddEvent(c)
}

// GetApiV1AdminEvents operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AdminEvents(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1AdminEventsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", query, &params.From)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter from: %w", err).Error())
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", query, &params.To)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter to: %w", err).Error())
	}

	return siw.Handler.GetApiV1AdminEvents(c, params)
}

// GetApiV1AdminEventsEventID operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AdminEventsEventID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID string

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", c.Params("eventID"), &eventID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter eventID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.GetApiV1AdminEventsEventID(c, eventID)
}

// AdminEventApprove operation middleware
func (siw *ServerInterfaceWrapper) AdminEventApprove(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID string

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", c.Params("eventID"), &eventID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter eventID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminEventApprove(c, eventID)
}

// AdminEventCancel operation middleware
func (siw *ServerInterfaceWrapper) AdminEventCancel(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID string

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", c.Params("eventID"), &eventID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter eventID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminEventCancel(c, eventID)
}

// AdminEventRequestDocuments operation middleware
func (siw *ServerInterfaceWrapper) AdminEventRequestDocuments(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID string

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", c.Params("eventID"), &eventID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter eventID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminEventRequestDocuments(c, eventID)
}

// AdminEventSetRate operation middleware
func (siw *ServerInterfaceWrapper) AdminEventSetRate(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID string

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", c.Params("eventID"), &eventID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter eventID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminEventSetRate(c, eventID)
}

// AdminGetInvoiceByID operation middleware
func (siw *ServerInterfaceWrapper) AdminGetInvoiceByID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "invoiceID" -------------
	var invoiceID string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceID", c.Params("invoiceID"), &invoiceID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter invoiceID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminGetInvoiceByID(c, invoiceID)
}

// AdminMarkInvoicePaid operation middleware
func (siw *ServerInterfaceWrapper) AdminMarkInvoicePaid(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "invoiceID" -------------
	var invoiceID string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceID", c.Params("invoiceID"), &invoiceID, runtime.BindStyledParameterOptions{Explode: false, Required: false})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter invoiceID: %w", err).Error())
	}

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminMarkInvoicePaid(c, invoiceID)
}

// AdminGetInvoicesForEvents operation middleware
func (siw *ServerInterfaceWrapper) AdminGetInvoicesForEvents(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminGetInvoicesForEventsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "events" -------------

	if paramValue := c.Query("events"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument events is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "events", query, &params.Events)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter events: %w", err).Error())
	}

	return siw.Handler.AdminGetInvoicesForEvents(c, params)
}

// AdminGetRates operation middleware
func (siw *ServerInterfaceWrapper) AdminGetRates(c *fiber.Ctx) error {

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminGetRates(c)
}

// AdminSendInvoice operation middleware
func (siw *ServerInterfaceWrapper) AdminSendInvoice(c *fiber.Ctx) error {

	c.Context().SetUserValue(Admin_authScopes, []string{})

	return siw.Handler.AdminSendInvoice(c)
}

// GetApiV1Events operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Events(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1EventsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", query, &params.From)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter from: %w", err).Error())
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", query, &params.To)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter to: %w", err).Error())
	}

	return siw.Handler.GetApiV1Events(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/api/v1/add-event", wrapper.AddEvent)

	router.Get(options.BaseURL+"/api/v1/admin/events", wrapper.GetApiV1AdminEvents)

	router.Get(options.BaseURL+"/api/v1/admin/events/:eventID", wrapper.GetApiV1AdminEventsEventID)

	router.Post(options.BaseURL+"/api/v1/admin/events/:eventID/approve-event", wrapper.AdminEventApprove)

	router.Post(options.BaseURL+"/api/v1/admin/events/:eventID/cancel-event", wrapper.AdminEventCancel)

	router.Post(options.BaseURL+"/api/v1/admin/events/:eventID/request-documents", wrapper.AdminEventRequestDocuments)

	router.Post(options.BaseURL+"/api/v1/admin/events/:eventID/set-rate", wrapper.AdminEventSetRate)

	router.Get(options.BaseURL+"/api/v1/admin/invoices/by-id/:invoiceID", wrapper.AdminGetInvoiceByID)

	router.Post(options.BaseURL+"/api/v1/admin/invoices/by-id/:invoiceID/mark-as-paid", wrapper.AdminMarkInvoicePaid)

	router.Get(options.BaseURL+"/api/v1/admin/invoices/for-events", wrapper.AdminGetInvoicesForEvents)

	router.Get(options.BaseURL+"/api/v1/admin/rates", wrapper.AdminGetRates)

	router.Post(options.BaseURL+"/api/v1/admin/send-invoice", wrapper.AdminSendInvoice)

	router.Get(options.BaseURL+"/api/v1/events", wrapper.GetApiV1Events)

}

type AddEventRequestObject struct {
	Body *AddEventJSONRequestBody
}

type AddEventResponseObject interface {
	VisitAddEventResponse(ctx *fiber.Ctx) error
}

type AddEvent200Response struct {
}

func (response AddEvent200Response) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AddEvent409JSONResponse ErrorResponse

func (response AddEvent409JSONResponse) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type AddEvent422JSONResponse ErrorResponse

func (response AddEvent422JSONResponse) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type AddEvent500JSONResponse ErrorResponse

func (response AddEvent500JSONResponse) VisitAddEventResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsRequestObject struct {
	Params GetApiV1AdminEventsParams
}

type GetApiV1AdminEventsResponseObject interface {
	VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error
}

type GetApiV1AdminEvents200JSONResponse AdminEventList

func (response GetApiV1AdminEvents200JSONResponse) VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1AdminEvents400JSONResponse ErrorResponse

func (response GetApiV1AdminEvents400JSONResponse) VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetApiV1AdminEvents500JSONResponse ErrorResponse

func (response GetApiV1AdminEvents500JSONResponse) VisitGetApiV1AdminEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsEventIDRequestObject struct {
	EventID string `json:"eventID,omitempty"`
}

type GetApiV1AdminEventsEventIDResponseObject interface {
	VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error
}

type GetApiV1AdminEventsEventID200JSONResponse Event

func (response GetApiV1AdminEventsEventID200JSONResponse) VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsEventID404JSONResponse ErrorResponse

func (response GetApiV1AdminEventsEventID404JSONResponse) VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1AdminEventsEventID500JSONResponse ErrorResponse

func (response GetApiV1AdminEventsEventID500JSONResponse) VisitGetApiV1AdminEventsEventIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminEventApproveRequestObject struct {
	EventID string `json:"eventID,omitempty"`
}

type AdminEventApproveResponseObject interface {
	VisitAdminEventApproveResponse(ctx *fiber.Ctx) error
}

type AdminEventApprove200Response struct {
}

func (response AdminEventApprove200Response) VisitAdminEventApproveResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AdminEventApprove404JSONResponse ErrorResponse

func (response AdminEventApprove404JSONResponse) VisitAdminEventApproveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminEventApprove500JSONResponse ErrorResponse

func (response AdminEventApprove500JSONResponse) VisitAdminEventApproveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminEventCancelRequestObject struct {
	EventID string `json:"eventID,omitempty"`
}

type AdminEventCancelResponseObject interface {
	VisitAdminEventCancelResponse(ctx *fiber.Ctx) error
}

type AdminEventCancel200Response struct {
}

func (response AdminEventCancel200Response) VisitAdminEventCancelResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AdminEventCancel404JSONResponse ErrorResponse

func (response AdminEventCancel404JSONResponse) VisitAdminEventCancelResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminEventCancel500JSONResponse ErrorResponse

func (response AdminEventCancel500JSONResponse) VisitAdminEventCancelResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminEventRequestDocumentsRequestObject struct {
	EventID string `json:"eventID,omitempty"`
	Body    *AdminEventRequestDocumentsJSONRequestBody
}

type AdminEventRequestDocumentsResponseObject interface {
	VisitAdminEventRequestDocumentsResponse(ctx *fiber.Ctx) error
}

type AdminEventRequestDocuments200Response struct {
}

func (response AdminEventRequestDocuments200Response) VisitAdminEventRequestDocumentsResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AdminEventRequestDocuments404JSONResponse ErrorResponse

func (response AdminEventRequestDocuments404JSONResponse) VisitAdminEventRequestDocumentsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminEventRequestDocuments500JSONResponse ErrorResponse

func (response AdminEventRequestDocuments500JSONResponse) VisitAdminEventRequestDocumentsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminEventSetRateRequestObject struct {
	EventID string `json:"eventID,omitempty"`
	Body    *AdminEventSetRateJSONRequestBody
}

type AdminEventSetRateResponseObject interface {
	VisitAdminEventSetRateResponse(ctx *fiber.Ctx) error
}

type AdminEventSetRate200Response struct {
}

func (response AdminEventSetRate200Response) VisitAdminEventSetRateResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AdminEventSetRate404JSONResponse ErrorResponse

func (response AdminEventSetRate404JSONResponse) VisitAdminEventSetRateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminEventSetRate500JSONResponse ErrorResponse

func (response AdminEventSetRate500JSONResponse) VisitAdminEventSetRateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminGetInvoiceByIDRequestObject struct {
	InvoiceID string `json:"invoiceID,omitempty"`
}

type AdminGetInvoiceByIDResponseObject interface {
	VisitAdminGetInvoiceByIDResponse(ctx *fiber.Ctx) error
}

type AdminGetInvoiceByID200JSONResponse Invoice

func (response AdminGetInvoiceByID200JSONResponse) VisitAdminGetInvoiceByIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AdminGetInvoiceByID404JSONResponse ErrorResponse

func (response AdminGetInvoiceByID404JSONResponse) VisitAdminGetInvoiceByIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminGetInvoiceByID500JSONResponse ErrorResponse

func (response AdminGetInvoiceByID500JSONResponse) VisitAdminGetInvoiceByIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminMarkInvoicePaidRequestObject struct {
	InvoiceID string `json:"invoiceID,omitempty"`
}

type AdminMarkInvoicePaidResponseObject interface {
	VisitAdminMarkInvoicePaidResponse(ctx *fiber.Ctx) error
}

type AdminMarkInvoicePaid200Response struct {
}

func (response AdminMarkInvoicePaid200Response) VisitAdminMarkInvoicePaidResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AdminMarkInvoicePaid404JSONResponse ErrorResponse

func (response AdminMarkInvoicePaid404JSONResponse) VisitAdminMarkInvoicePaidResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminMarkInvoicePaid500JSONResponse ErrorResponse

func (response AdminMarkInvoicePaid500JSONResponse) VisitAdminMarkInvoicePaidResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminGetInvoicesForEventsRequestObject struct {
	Params AdminGetInvoicesForEventsParams
}

type AdminGetInvoicesForEventsResponseObject interface {
	VisitAdminGetInvoicesForEventsResponse(ctx *fiber.Ctx) error
}

type AdminGetInvoicesForEvents200JSONResponse InvoiceEvents

func (response AdminGetInvoicesForEvents200JSONResponse) VisitAdminGetInvoicesForEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AdminGetInvoicesForEvents404JSONResponse ErrorResponse

func (response AdminGetInvoicesForEvents404JSONResponse) VisitAdminGetInvoicesForEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminGetInvoicesForEvents500JSONResponse ErrorResponse

func (response AdminGetInvoicesForEvents500JSONResponse) VisitAdminGetInvoicesForEventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminGetRatesRequestObject struct {
}

type AdminGetRatesResponseObject interface {
	VisitAdminGetRatesResponse(ctx *fiber.Ctx) error
}

type AdminGetRates200JSONResponse RatesList

func (response AdminGetRates200JSONResponse) VisitAdminGetRatesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AdminGetRates500JSONResponse ErrorResponse

func (response AdminGetRates500JSONResponse) VisitAdminGetRatesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AdminSendInvoiceRequestObject struct {
	Body *AdminSendInvoiceJSONRequestBody
}

type AdminSendInvoiceResponseObject interface {
	VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error
}

type AdminSendInvoice200Response struct {
}

func (response AdminSendInvoice200Response) VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AdminSendInvoice404JSONResponse ErrorResponse

func (response AdminSendInvoice404JSONResponse) VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AdminSendInvoice500JSONResponse ErrorResponse

func (response AdminSendInvoice500JSONResponse) VisitAdminSendInvoiceResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1EventsRequestObject struct {
	Params GetApiV1EventsParams
}

type GetApiV1EventsResponseObject interface {
	VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error
}

type GetApiV1Events200JSONResponse EventList

func (response GetApiV1Events200JSONResponse) VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1Events400JSONResponse ErrorResponse

func (response GetApiV1Events400JSONResponse) VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetApiV1Events500JSONResponse ErrorResponse

func (response GetApiV1Events500JSONResponse) VisitGetApiV1EventsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add an event
	// (POST /api/v1/add-event)
	AddEvent(ctx context.Context, request AddEventRequestObject) (AddEventResponseObject, error)

	// (GET /api/v1/admin/events)
	GetApiV1AdminEvents(ctx context.Context, request GetApiV1AdminEventsRequestObject) (GetApiV1AdminEventsResponseObject, error)

	// (GET /api/v1/admin/events/{eventID})
	GetApiV1AdminEventsEventID(ctx context.Context, request GetApiV1AdminEventsEventIDRequestObject) (GetApiV1AdminEventsEventIDResponseObject, error)

	// (POST /api/v1/admin/events/{eventID}/approve-event)
	AdminEventApprove(ctx context.Context, request AdminEventApproveRequestObject) (AdminEventApproveResponseObject, error)

	// (POST /api/v1/admin/events/{eventID}/cancel-event)
	AdminEventCancel(ctx context.Context, request AdminEventCancelRequestObject) (AdminEventCancelResponseObject, error)

	// (POST /api/v1/admin/events/{eventID}/request-documents)
	AdminEventRequestDocuments(ctx context.Context, request AdminEventRequestDocumentsRequestObject) (AdminEventRequestDocumentsResponseObject, error)

	// (POST /api/v1/admin/events/{eventID}/set-rate)
	AdminEventSetRate(ctx context.Context, request AdminEventSetRateRequestObject) (AdminEventSetRateResponseObject, error)

	// (GET /api/v1/admin/invoices/by-id/{invoiceID})
	AdminGetInvoiceByID(ctx context.Context, request AdminGetInvoiceByIDRequestObject) (AdminGetInvoiceByIDResponseObject, error)

	// (POST /api/v1/admin/invoices/by-id/{invoiceID}/mark-as-paid)
	AdminMarkInvoicePaid(ctx context.Context, request AdminMarkInvoicePaidRequestObject) (AdminMarkInvoicePaidResponseObject, error)

	// (GET /api/v1/admin/invoices/for-events)
	AdminGetInvoicesForEvents(ctx context.Context, request AdminGetInvoicesForEventsRequestObject) (AdminGetInvoicesForEventsResponseObject, error)

	// (GET /api/v1/admin/rates)
	AdminGetRates(ctx context.Context, request AdminGetRatesRequestObject) (AdminGetRatesResponseObject, error)

	// (POST /api/v1/admin/send-invoice)
	AdminSendInvoice(ctx context.Context, request AdminSendInvoiceRequestObject) (AdminSendInvoiceResponseObject, error)

	// (GET /api/v1/events)
	GetApiV1Events(ctx context.Context, request GetApiV1EventsRequestObject) (GetApiV1EventsResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AddEvent operation middleware
func (sh *strictHandler) AddEvent(ctx *fiber.Ctx) error {
	var request AddEventRequestObject

	var body AddEventJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddEvent(ctx.UserContext(), request.(AddEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AddEventResponseObject); ok {
		if err := validResponse.VisitAddEventResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1AdminEvents operation middleware
func (sh *strictHandler) GetApiV1AdminEvents(ctx *fiber.Ctx, params GetApiV1AdminEventsParams) error {
	var request GetApiV1AdminEventsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1AdminEvents(ctx.UserContext(), request.(GetApiV1AdminEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1AdminEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1AdminEventsResponseObject); ok {
		if err := validResponse.VisitGetApiV1AdminEventsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1AdminEventsEventID operation middleware
func (sh *strictHandler) GetApiV1AdminEventsEventID(ctx *fiber.Ctx, eventID string) error {
	var request GetApiV1AdminEventsEventIDRequestObject

	request.EventID = eventID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1AdminEventsEventID(ctx.UserContext(), request.(GetApiV1AdminEventsEventIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1AdminEventsEventID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1AdminEventsEventIDResponseObject); ok {
		if err := validResponse.VisitGetApiV1AdminEventsEventIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminEventApprove operation middleware
func (sh *strictHandler) AdminEventApprove(ctx *fiber.Ctx, eventID string) error {
	var request AdminEventApproveRequestObject

	request.EventID = eventID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminEventApprove(ctx.UserContext(), request.(AdminEventApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminEventApprove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminEventApproveResponseObject); ok {
		if err := validResponse.VisitAdminEventApproveResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminEventCancel operation middleware
func (sh *strictHandler) AdminEventCancel(ctx *fiber.Ctx, eventID string) error {
	var request AdminEventCancelRequestObject

	request.EventID = eventID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminEventCancel(ctx.UserContext(), request.(AdminEventCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminEventCancel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminEventCancelResponseObject); ok {
		if err := validResponse.VisitAdminEventCancelResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminEventRequestDocuments operation middleware
func (sh *strictHandler) AdminEventRequestDocuments(ctx *fiber.Ctx, eventID string) error {
	var request AdminEventRequestDocumentsRequestObject

	request.EventID = eventID

	var body AdminEventRequestDocumentsJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminEventRequestDocuments(ctx.UserContext(), request.(AdminEventRequestDocumentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminEventRequestDocuments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminEventRequestDocumentsResponseObject); ok {
		if err := validResponse.VisitAdminEventRequestDocumentsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminEventSetRate operation middleware
func (sh *strictHandler) AdminEventSetRate(ctx *fiber.Ctx, eventID string) error {
	var request AdminEventSetRateRequestObject

	request.EventID = eventID

	var body AdminEventSetRateJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminEventSetRate(ctx.UserContext(), request.(AdminEventSetRateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminEventSetRate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminEventSetRateResponseObject); ok {
		if err := validResponse.VisitAdminEventSetRateResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminGetInvoiceByID operation middleware
func (sh *strictHandler) AdminGetInvoiceByID(ctx *fiber.Ctx, invoiceID string) error {
	var request AdminGetInvoiceByIDRequestObject

	request.InvoiceID = invoiceID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminGetInvoiceByID(ctx.UserContext(), request.(AdminGetInvoiceByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminGetInvoiceByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminGetInvoiceByIDResponseObject); ok {
		if err := validResponse.VisitAdminGetInvoiceByIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminMarkInvoicePaid operation middleware
func (sh *strictHandler) AdminMarkInvoicePaid(ctx *fiber.Ctx, invoiceID string) error {
	var request AdminMarkInvoicePaidRequestObject

	request.InvoiceID = invoiceID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminMarkInvoicePaid(ctx.UserContext(), request.(AdminMarkInvoicePaidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminMarkInvoicePaid")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminMarkInvoicePaidResponseObject); ok {
		if err := validResponse.VisitAdminMarkInvoicePaidResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminGetInvoicesForEvents operation middleware
func (sh *strictHandler) AdminGetInvoicesForEvents(ctx *fiber.Ctx, params AdminGetInvoicesForEventsParams) error {
	var request AdminGetInvoicesForEventsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminGetInvoicesForEvents(ctx.UserContext(), request.(AdminGetInvoicesForEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminGetInvoicesForEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminGetInvoicesForEventsResponseObject); ok {
		if err := validResponse.VisitAdminGetInvoicesForEventsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminGetRates operation middleware
func (sh *strictHandler) AdminGetRates(ctx *fiber.Ctx) error {
	var request AdminGetRatesRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminGetRates(ctx.UserContext(), request.(AdminGetRatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminGetRates")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminGetRatesResponseObject); ok {
		if err := validResponse.VisitAdminGetRatesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminSendInvoice operation middleware
func (sh *strictHandler) AdminSendInvoice(ctx *fiber.Ctx) error {
	var request AdminSendInvoiceRequestObject

	var body AdminSendInvoiceJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AdminSendInvoice(ctx.UserContext(), request.(AdminSendInvoiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminSendInvoice")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AdminSendInvoiceResponseObject); ok {
		if err := validResponse.VisitAdminSendInvoiceResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1Events operation middleware
func (sh *strictHandler) GetApiV1Events(ctx *fiber.Ctx, params GetApiV1EventsParams) error {
	var request GetApiV1EventsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1Events(ctx.UserContext(), request.(GetApiV1EventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1Events")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1EventsResponseObject); ok {
		if err := validResponse.VisitGetApiV1EventsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
