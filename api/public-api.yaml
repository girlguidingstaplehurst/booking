openapi: 3.0.3
info:
  title: Booking System API
  description: |-
    TODO
  license:
    name: GNU Affero GPL 3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  version: 1.0.0
tags:
  - name: public
    description: Public REST APIs
  - name: admin
    description: Private Administration REST APIs
paths:
  /api/v1/add-event:
    post:
      tags:
        - public
      summary: Add an event
      description: Add a new event to the calendar
      operationId: addEvent
      requestBody:
        description: Event to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
        required: true
      responses:
        '200':
          description: Successfully added
        '409':
          description: Another event exists on this date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/events:
    get:
      tags:
        - public
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date
          description: The date to obtain events from
        - in: query
          name: to
          schema:
            type: string
            format: date
          description: The date to obtain events to
      responses:
        '200':
          description: "Zero or more events exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventList'
        '400':
          description: Request parameters are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/events:
    get:
      security:
        - admin_auth: [ ]
      tags:
        - admin
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date
          description: The date to obtain events from
        - in: query
          name: to
          schema:
            type: string
            format: date
          description: The date to obtain events to
      responses:
        '200':
          description: "Zero or more events exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminEventList'
        '400':
          description: Request parameters are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/events/{eventID}:
    get:
      security:
        - admin_auth: [ ]
      tags:
        - admin
      parameters:
        - in: path
          name: eventID
          schema:
            type: string
          description: The ID of the event to retrieve
      responses:
        '200':
          description: "Event exists"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: "No event exists with that ID"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/invoices/for-events:
    get:
      security:
        - admin_auth: [ ]
      tags:
        - admin
      operationId: adminGetInvoicesForEvents
      parameters:
        - in: query
          required: true
          name: events
          schema:
            type: array
            items:
              type: string
          description: A comma-separated list of events to generate invoices for
      responses:
        '200':
          description: "Invoice sent successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceEvents'
        '404':
          description: "No event exists with that ID"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/send-invoice:
    post:
      security:
        - admin_auth: [ ]
      tags:
        - admin
      operationId: adminSendInvoice
      requestBody:
        description: Invoice to send
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendInvoiceBody'
        required: true
      responses:
        '200':
          description: "Invoice sent successfully"
        '404':
          description: "No event exists with that ID"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - error_message
      properties:
        error_message:
          type: string
    NewEvent:
      type: object
      required:
        - event
        - contact
      properties:
        event:
          type: object
          required:
            - name
            - from
            - to
            - publicly_visible
          properties:
            name:
              type: string
            from:
              type: string
              format: datetime
            to:
              type: string
              format: datetime
            publicly_visible:
              type: boolean
              default: true
        contact:
          type: object
          required:
            - name
            - email_address
          properties:
            name:
              type: string
            email_address:
              type: string
              format: email
    EventStatus:
      type: string
      enum: [ provisional, "awaiting documents", approved, cancelled ]
    EventList:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/ListEvent'
    ListEvent:
      type: object
      required:
        - id
        - name
        - from
        - to
        - status
      properties:
        id:
          type: string
        name:
          type: string
        from:
          type: string
          format: datetime
        to:
          type: string
          format: datetime
        status:
          $ref: '#/components/schemas/EventStatus'
    AdminEventList:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Event:
      type: object
      required:
        - id
        - name
        - from
        - to
        - status
        - visible
        - contact
        - email
      properties:
        id:
          type: string
        name:
          type: string
        from:
          type: string
          format: datetime
        to:
          type: string
          format: datetime
        status:
          $ref: '#/components/schemas/EventStatus'
        visible:
          type: boolean
        contact:
          type: string
        email:
          type: string
          format: email
        assignee:
          type: string
          format: email
        keyholderIn:
          type: string
          format: email
        keyholderOut:
          type: string
          format: email
    SendInvoiceBody:
      type: object
      required:
        - contact
        - items
      properties:
        contact:
          type: string
          format: email
        events:
          type: array
          description: List of Event IDs that this invoice applies to.
          items:
            type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/SendInvoiceBodyItem'
    SendInvoiceBodyItem:
      type: object
      required:
        - cost
        - description
      properties:
        description:
          type: string
        cost:
          type: number
        eventID:
          type: string
    InvoiceEvents:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/InvoiceEvent'
    InvoiceEvent:
      type: object
      required:
        - id
        - name
        - from
        - to
        - status
        - rate
        - discountTable
      properties:
        id:
          type: string
        name:
          type: string
        from:
          type: string
          format: datetime
        to:
          type: string
          format: datetime
        status:
          $ref: '#/components/schemas/EventStatus'
        rate:
          type: number
        discountTable:
          $ref: '#/components/schemas/DiscountTable'
    DiscountTable:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DiscountTableRow'
    DiscountTableRow:
      type: object
      required:
        - type
        - value
      properties:
        type:
          type: string
          enum: [flat]
        value:
          type: number

  securitySchemes:
    admin_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT